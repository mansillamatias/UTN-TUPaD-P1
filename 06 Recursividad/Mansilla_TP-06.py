import os

# ############################################# EJERCICIO 1 ##############################################
print("""\n1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa 
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros 
entre 1 y el n√∫mero que indique el usuario \n""")

def factorial(num):
  if num == 0 or num == 1:
    return 1
  else:
    return num * factorial(num - 1)
  
numero = int(input("Ingrese un n√∫mero entero positivo: "))
print(f"\nFactorial de {numero}: {factorial(numero)}")

# Mensaje para el usuario
input("\nPresione Enter para continuar...")
# Limpiamos la terminal
os.system('cls' if os.name == 'nt' else 'clear')

############################################# EJERCICIO 2 ##############################################
print("""\n2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.\n""")

def fibonacci(posicion):
  if posicion == 0:
    return 0
  elif posicion == 1:
    return 1
  else:
    return fibonacci(posicion - 1) + fibonacci(posicion - 2)
  
posicion = int(input("Ingrese la posici√≥n en la serie de Fibonacci: "))
print(f"\nValor en la posici√≥n {posicion} de la serie de Fibonacci: {fibonacci(posicion)}")

# Mensaje para el usuario
input("\nPresione Enter para continuar...")
# Limpiamos la terminal
os.system('cls' if os.name == 'nt' else 'clear')

############################################# EJERCICIO 3 ##############################################
print("""\n3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general. \n""")

def potencia(base, exponente):
  if exponente == 0:
    return 1
  else:
    return base * potencia(base, exponente - 1)

base = float(input("Ingrese la base: "))
exponente = int(input("Ingrese el exponente: "))

resultado = potencia(base, exponente)
print(f"\n{base} elevado a {exponente} es: {resultado}")

# Mensaje para el usuario
input("\nPresione Enter para continuar...")
# Limpiamos la terminal
os.system('cls' if os.name == 'nt' else 'clear')

############################################# EJERCICIO 4 ##############################################
print("""\n4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base 
decimal y devuelva su representaci√≥n en binario como una cadena de texto.\n""")

def decimal_a_binario(numero):
    if numero == 0:
        return ""
    else:
        return decimal_a_binario(numero // 2) + str(numero % 2)

numero = int(input("Ingrese un n√∫mero entero positivo: "))
if numero < 0:
    print("Por favor, ingrese un n√∫mero entero positivo.")
else:
    resultado = decimal_a_binario(numero)
    if resultado == "":
        resultado = "0"
    print(f"\nLa representaci√≥n en binario de {numero} es: {resultado}")

# Mensaje para el usuario
input("\nPresione Enter para continuar...")
# Limpiamos la terminal
os.system('cls' if os.name == 'nt' else 'clear')

############################################# EJERCICIO 5 ##############################################
print("""\n5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es. 
Requisitos: 
La soluci√≥n debe ser recursiva. 
No se debe usar [::-1] ni la funci√≥n reversed(). \n""")

def es_palindromo(palabra):
  # Convertimos la palabra a min√∫sculas para evitar problemas de may√∫sculas/min√∫sculas y eliminamos espacios
  palabra = palabra.strip(palabra.lower())
    
  # Caso base: si la palabra tiene 0 o 1 caracteres, es un pal√≠ndromo
  if len(palabra) <= 1:
    return True
    
  # Comparamos el primer y √∫ltimo car√°cter
  if palabra[0] != palabra[-1]:
    return False
    
  # Llamada recursiva eliminando el primer y √∫ltimo car√°cter
  return es_palindromo(palabra[1:-1])

palabra = input("Ingrese una palabra o frase sin espacios ni tildes: ")
resultado = es_palindromo(palabra)

if resultado:
    print(f"\n'{palabra}' es un pal√≠ndromo.")
else:
    print(f"\n'{palabra}' no es un pal√≠ndromo.")

# Mensaje para el usuario
input("\nPresione Enter para continuar...")
# Limpiamos la terminal
os.system('cls' if os.name == 'nt' else 'clear')

############################################# EJERCICIO 6 ##############################################
print("""\n6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
Restricciones: 
 - No se puede convertir el n√∫mero a string. 
 - Us√° operaciones matem√°ticas (%, //) y recursi√≥n. \n""")

def suma_digitos(n):
  # Caso base: si n es 0, la suma de los d√≠gitos es 0
  if n == 0:
    return 0
  else:
    # Sumar el √∫ltimo d√≠gito (n % 10) y llamar recursivamente con el resto del n√∫mero (n // 10)
    return (n % 10) + suma_digitos(n // 10)

n = int(input("Ingrese un n√∫mero entero positivo: "))
if n < 0:
  print("Por favor, ingrese un n√∫mero entero positivo.")
else:
  resultado = suma_digitos(n)
  print(f"\nLa suma de los d√≠gitos de {n} es: {resultado}")

# Mensaje para el usuario
input("\nPresione Enter para continuar...")
# Limpiamos la terminal
os.system('cls' if os.name == 'nt' else 'clear')

############################################# EJERCICIO 7 ##############################################
print("""\n7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque. 
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el 0 nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide. \n""")

def contar_bloques(n):
  # Caso base: si n es 0, no hay bloques
  if n == 0:
    return 0
  else:
    # Sumar el n√∫mero de bloques en el nivel actual (n) y llamar recursivamente para el siguiente nivel (n - 1)
    return n + contar_bloques(n - 1)

n = int(input("Ingrese el n√∫mero de bloques en el nivel m√°s bajo: "))

if n < 0:
  print("Por favor, ingrese un n√∫mero entero positivo.")
else:
  total_bloques = contar_bloques(n)
  print(f"\nEl total de bloques necesarios para construir la pir√°mide con {n} bloques en el nivel m√°s bajo es: {total_bloques}")

# Mensaje para el usuario
input("\nPresione Enter para continuar...")
# Limpiamos la terminal
os.system('cls' if os.name == 'nt' else 'clear')

############################################# EJERCICIO 8 ##############################################
print("""\n8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.\n""")

def contar_digito(numero, digito):
    # Caso base: si el n√∫mero es 0, no hay m√°s d√≠gitos
  if numero == 0:
        return 0
  else:
    # Verificar si el √∫ltimo d√≠gito del n√∫mero es igual al d√≠gito buscado
    if numero % 10 == digito:
      return 1 + contar_digito(numero // 10, digito)
    else:
      return contar_digito(numero // 10, digito)

numero = int(input("Ingrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese un d√≠gito (0-9): "))

if numero < 0 or digito < 0 or digito > 9:
    print("Por favor, ingrese un n√∫mero entero positivo y un d√≠gito entre 0 y 9.")
else:
    resultado = contar_digito(numero, digito)
    print(f"\nEl d√≠gito {digito} aparece {resultado} veces en el n√∫mero {numero}.")

# Mensaje para el usuario
input("\nPresione Enter para continuar...")
# Limpiamos la terminal
os.system('cls' if os.name == 'nt' else 'clear')